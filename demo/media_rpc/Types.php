<?php

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class RetrieveStruct {
  static $_TSPEC;

  public $ver = null;
  public $fsql = null;
  public $paras = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ver',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fsql',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'paras',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ver'])) {
        $this->ver = $vals['ver'];
      }
      if (isset($vals['fsql'])) {
        $this->fsql = $vals['fsql'];
      }
      if (isset($vals['paras'])) {
        $this->paras = $vals['paras'];
      }
    }
  }

  public function getName() {
    return 'RetrieveStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fsql);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->paras = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->paras []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetrieveStruct');
    if ($this->ver !== null) {
      $xfer += $output->writeFieldBegin('ver', TType::I32, 1);
      $xfer += $output->writeI32($this->ver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsql !== null) {
      $xfer += $output->writeFieldBegin('fsql', TType::STRING, 2);
      $xfer += $output->writeString($this->fsql);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paras !== null) {
      if (!is_array($this->paras)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('paras', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->paras));
        {
          foreach ($this->paras as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MediaRetrieveResult {
  static $_TSPEC;

  public $retCode = null;
  public $retMsg = null;
  public $total = null;
  public $usedTime = null;
  public $mediaIdList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'retMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'usedTime',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'mediaIdList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retCode'])) {
        $this->retCode = $vals['retCode'];
      }
      if (isset($vals['retMsg'])) {
        $this->retMsg = $vals['retMsg'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['usedTime'])) {
        $this->usedTime = $vals['usedTime'];
      }
      if (isset($vals['mediaIdList'])) {
        $this->mediaIdList = $vals['mediaIdList'];
      }
    }
  }

  public function getName() {
    return 'MediaRetrieveResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->usedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->mediaIdList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->mediaIdList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MediaRetrieveResult');
    if ($this->retCode !== null) {
      $xfer += $output->writeFieldBegin('retCode', TType::I32, 1);
      $xfer += $output->writeI32($this->retCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retMsg !== null) {
      $xfer += $output->writeFieldBegin('retMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->retMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usedTime !== null) {
      $xfer += $output->writeFieldBegin('usedTime', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->usedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mediaIdList !== null) {
      if (!is_array($this->mediaIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mediaIdList', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->mediaIdList));
        {
          foreach ($this->mediaIdList as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


